/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 * Portions Copyright 2008 Alexander Coles (Ikonoklastik Productions).
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.nbgit.options;

import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.nbgit.GitModuleConfig;
import org.nbgit.util.GitUtils;
import org.nbgit.util.HtmlFormatter;

final class GitPanel extends javax.swing.JPanel {

	private final GitOptionsPanelController controller;
	private final DocumentListener listener;

	GitPanel(GitOptionsPanelController controller)
	{
		this.controller = controller;
		this.listener = new DocumentListener() {

			public void insertUpdate(DocumentEvent e)
			{
				nameChange();
			}

			public void removeUpdate(DocumentEvent e)
			{
				nameChange();
			}

			public void changedUpdate(DocumentEvent e)
			{
				nameChange();
			}

		};
		initComponents();
	}

	@Override
	public void addNotify()
	{
		super.addNotify();
		emailTextField.getDocument().addDocumentListener(listener);
	}

	@Override
	public void removeNotify()
	{
		emailTextField.getDocument().removeDocumentListener(listener);
		super.removeNotify();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        generalOptionsPanel = new javax.swing.JPanel();
        userInformation = new javax.swing.JPanel();
        emailLabel = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        statusLabels = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fileOptionsPanel = new javax.swing.JPanel();
        exportFilename = new javax.swing.JLabel();
        backupOnRevertModifications = new javax.swing.JCheckBox();

        userInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GitPanel.class, "UserInformation"))); // NOI18N
        userInformation.setName(org.openide.util.NbBundle.getMessage(GitPanel.class, "UserInformationPanel.Title")); // NOI18N

        emailLabel.setLabelFor(emailTextField);
        org.openide.awt.Mnemonics.setLocalizedText(emailLabel, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel1.text")); // NOI18N

        emailTextField.setToolTipText(org.openide.util.NbBundle.getMessage(GitPanel.class, "emailTextField.TOOLTIP")); // NOI18N

        userNameLabel.setLabelFor(userNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(userNameLabel, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel5.text")); // NOI18N

        userNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(GitPanel.class, "userNameTextField.TOOLTIP")); // NOI18N

        org.jdesktop.layout.GroupLayout userInformationLayout = new org.jdesktop.layout.GroupLayout(userInformation);
        userInformation.setLayout(userInformationLayout);
        userInformationLayout.setHorizontalGroup(
            userInformationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(userInformationLayout.createSequentialGroup()
                .addContainerGap()
                .add(userInformationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(userInformationLayout.createSequentialGroup()
                        .add(emailLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(emailTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, userInformationLayout.createSequentialGroup()
                        .add(userNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26)
                        .add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 304, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        userInformationLayout.setVerticalGroup(
            userInformationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(userInformationLayout.createSequentialGroup()
                .add(userInformationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(emailLabel)
                    .add(emailTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(userInformationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userNameLabel)
                    .add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(36, 36, 36))
        );

        emailTextField.getAccessibleContext().setAccessibleName("Email:");
        emailTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_userNameTextField")); // NOI18N

        statusLabels.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GitPanel.class, "StatusLabel"))); // NOI18N

        jLabel3.setLabelFor(annotationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel3.text")); // NOI18N

        annotationTextField.setText(org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.annotationTextField.text")); // NOI18N
        annotationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.addButton.text")); // NOI18N

        org.jdesktop.layout.GroupLayout statusLabelsLayout = new org.jdesktop.layout.GroupLayout(statusLabels);
        statusLabels.setLayout(statusLabelsLayout);
        statusLabelsLayout.setHorizontalGroup(
            statusLabelsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusLabelsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(annotationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 265, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addButton)
                .add(88, 88, 88))
        );
        statusLabelsLayout.setVerticalGroup(
            statusLabelsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusLabelsLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusLabelsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(annotationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton)
                    .add(jLabel3))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        addButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_addButton")); // NOI18N

        org.jdesktop.layout.GroupLayout generalOptionsPanelLayout = new org.jdesktop.layout.GroupLayout(generalOptionsPanel);
        generalOptionsPanel.setLayout(generalOptionsPanelLayout);
        generalOptionsPanelLayout.setHorizontalGroup(
            generalOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(generalOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(userInformation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(statusLabels, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        generalOptionsPanelLayout.setVerticalGroup(
            generalOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(userInformation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(statusLabels, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GitPanel.class, "BasicSettingsTab.Title"), generalOptionsPanel); // NOI18N

        exportFilename.setLabelFor(exportFilenameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(exportFilename, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.ExportFilename.text")); // NOI18N

        backupOnRevertModifications.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(backupOnRevertModifications, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jCheckBox1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(exportFilenameBrowseButton, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.browseButton2.text")); // NOI18N

        org.jdesktop.layout.GroupLayout fileOptionsPanelLayout = new org.jdesktop.layout.GroupLayout(fileOptionsPanel);
        fileOptionsPanel.setLayout(fileOptionsPanelLayout);
        fileOptionsPanelLayout.setHorizontalGroup(
            fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileOptionsPanelLayout.createSequentialGroup()
                .add(fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fileOptionsPanelLayout.createSequentialGroup()
                        .add(191, 191, 191)
                        .add(exportFilenameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(exportFilenameBrowseButton))
                    .add(fileOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(backupOnRevertModifications)))
                .addContainerGap(225, Short.MAX_VALUE))
            .add(fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(fileOptionsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(exportFilename)
                    .addContainerGap(502, Short.MAX_VALUE)))
        );
        fileOptionsPanelLayout.setVerticalGroup(
            fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, fileOptionsPanelLayout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .add(fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(exportFilenameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(exportFilenameBrowseButton))
                .add(78, 78, 78)
                .add(backupOnRevertModifications)
                .add(54, 54, 54))
            .add(fileOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(fileOptionsPanelLayout.createSequentialGroup()
                    .add(148, 148, 148)
                    .add(exportFilename)
                    .addContainerGap(162, Short.MAX_VALUE)))
        );

        backupOnRevertModifications.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_backupOnRevertModifications")); // NOI18N
        exportFilenameTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_exportFileNameTextField")); // NOI18N
        exportFilenameBrowseButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_exportFilenameBrowseButton")); // NOI18N

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GitPanel.class, "fileOptionsPanel.title"), fileOptionsPanel); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 698, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 372, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void annotationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_annotationTextFieldActionPerformed

	private void nameChange()
	{
		controller.changed();
	}

	void load()
	{
		// TODO read settings and initialize GUI
		// Example:
		// someCheckBox.setSelected(Preferences.userNodeForPackage(GitPanel.class).getBoolean("someFlag", false)); // NOI18N
		// or for org.openide.util with API spec. version >= 7.4:
		// someCheckBox.setSelected(NbPreferences.forModule(GitPanel.class).getBoolean("someFlag", false)); // NOI18N
		// or:
		// someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
		emailTextField.setText(GitModuleConfig.getDefault().getEmail());
		userNameTextField.setText(GitModuleConfig.getDefault().getUserName());
		exportFilenameTextField.setText(GitModuleConfig.getDefault().getExportFilename());
		annotationTextField.setText(GitModuleConfig.getDefault().getAnnotationFormat());
		backupOnRevertModifications.setSelected(GitModuleConfig.getDefault().getBackupOnRevertModifications());
	}

	void store()
	{
		// TODO store modified settings
		// Example:
		// Preferences.userNodeForPackage(GitPanel.class).putBoolean("someFlag", someCheckBox.isSelected()); // NOI18N
		// or for org.openide.util with API spec. version >= 7.4:
		// NbPreferences.forModule(GitPanel.class).putBoolean("someFlag", someCheckBox.isSelected()); // NOI18N
		// or:
		// SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
		GitModuleConfig.getDefault().setEmail(emailTextField.getText());
		GitModuleConfig.getDefault().setUserName(userNameTextField.getText());
		GitModuleConfig.getDefault().setExportFilename(exportFilenameTextField.getText());
		GitModuleConfig.getDefault().setAnnotationFormat(annotationTextField.getText());
		GitModuleConfig.getDefault().setBackupOnRevertModifications(backupOnRevertModifications.isSelected());
		if (HtmlFormatter.isRevisionInAnnotationFormat(annotationTextField.getText()))
			GitUtils.warningDialog(GitPanel.class,
				"MSG_STATUS_LABEL_WITH_REVSION_TITLE", "MSG_STATUS_LABEL_WITH_REVSION_MSG");
	}

	boolean valid()
	{
		// TODO check whether form is consistent and complete
		//return true;
		String name = userNameTextField.getText();
		String email = emailTextField.getText();
		Boolean valid;

		valid = GitModuleConfig.getDefault().isUserNameValid(name);
		if (!valid)
			return false;
		valid = GitModuleConfig.getDefault().isEmailValid(email);
		return valid;
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    final javax.swing.JButton addButton = new javax.swing.JButton();
    final javax.swing.JTextField annotationTextField = new javax.swing.JTextField();
    private javax.swing.JCheckBox backupOnRevertModifications;
    private javax.swing.JLabel emailLabel;
    final javax.swing.JTextField emailTextField = new javax.swing.JTextField();
    private javax.swing.JLabel exportFilename;
    final javax.swing.JButton exportFilenameBrowseButton = new javax.swing.JButton();
    final javax.swing.JTextField exportFilenameTextField = new javax.swing.JTextField();
    private javax.swing.JPanel fileOptionsPanel;
    private javax.swing.JPanel generalOptionsPanel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel statusLabels;
    private javax.swing.JPanel userInformation;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
