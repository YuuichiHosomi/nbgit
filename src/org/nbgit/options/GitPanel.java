/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 * Portions Copyright 2008 Alexander Coles (Ikonoklastik Productions).
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.nbgit.options;

import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.nbgit.GitModuleConfig;
import org.nbgit.util.GitUtils;
import org.nbgit.util.HtmlFormatter;

final class GitPanel extends javax.swing.JPanel {

	private final GitOptionsPanelController controller;
	private final DocumentListener listener;

	GitPanel(GitOptionsPanelController controller)
	{
		this.controller = controller;
		this.listener = new DocumentListener() {

			public void insertUpdate(DocumentEvent e)
			{
				nameChange();
			}

			public void removeUpdate(DocumentEvent e)
			{
				nameChange();
			}

			public void changedUpdate(DocumentEvent e)
			{
				nameChange();
			}

		};
		initComponents();
	}

	@Override
	public void addNotify()
	{
		super.addNotify();
		emailTextField.getDocument().addDocumentListener(listener);
	}

	@Override
	public void removeNotify()
	{
		emailTextField.getDocument().removeDocumentListener(listener);
		super.removeNotify();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		emailLabel = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		exportFilename = new javax.swing.JLabel();
		backupOnRevertModifications = new javax.swing.JCheckBox();
		userNameTextField = new javax.swing.JTextField();
		userNameLabel = new javax.swing.JLabel();

		emailLabel.setLabelFor(emailTextField);
		org.openide.awt.Mnemonics.setLocalizedText(emailLabel, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel1.text")); // NOI18N

		jPanel1.setBorder(UIManager.getBorder("TitledBorder.aquaVariant"));

		jLabel3.setLabelFor(annotationTextField);
		org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel3.text")); // NOI18N

		annotationTextField.setText(org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.annotationTextField.text")); // NOI18N

		org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.addButton.text")); // NOI18N

		org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.add(jLabel3)
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
					.add(annotationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 405, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 53, Short.MAX_VALUE)
					.add(addButton)
					.addContainerGap())
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
						.add(jLabel3)
						.add(addButton)
						.add(annotationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
					.addContainerGap(20, Short.MAX_VALUE))
				);

		addButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_addButton")); // NOI18N

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

		org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel4.text")); // NOI18N

		org.openide.awt.Mnemonics.setLocalizedText(manageButton, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.manageButton.text")); // NOI18N

		org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.add(jLabel4)
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 429, Short.MAX_VALUE)
					.add(manageButton)
					.addContainerGap())
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
						.add(jLabel4)
						.add(manageButton))
					.addContainerGap(24, Short.MAX_VALUE))
				);

		manageButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_manageButton")); // NOI18N

		exportFilename.setLabelFor(exportFilenameTextField);
		org.openide.awt.Mnemonics.setLocalizedText(exportFilename, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.ExportFilename.text")); // NOI18N

		org.openide.awt.Mnemonics.setLocalizedText(exportFilenameBrowseButton, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.browseButton2.text")); // NOI18N

		backupOnRevertModifications.setSelected(true);
		org.openide.awt.Mnemonics.setLocalizedText(backupOnRevertModifications, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jCheckBox1.text")); // NOI18N

		userNameLabel.setLabelFor(userNameTextField);
		org.openide.awt.Mnemonics.setLocalizedText(userNameLabel, org.openide.util.NbBundle.getMessage(GitPanel.class, "GitPanel.jLabel5.text")); // NOI18N

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout.createSequentialGroup()
					.addContainerGap()
					.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
						.add(layout.createSequentialGroup()
							.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(backupOnRevertModifications)
								.add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.add(layout.createSequentialGroup()
									.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
										.add(layout.createSequentialGroup()
											.add(emailLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
											.add(59, 59, 59))
										.add(layout.createSequentialGroup()
											.add(userNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
											.add(32, 32, 32)))
									.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
										.add(org.jdesktop.layout.GroupLayout.TRAILING, userNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
										.add(emailTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE))))
							.addContainerGap())
						.add(layout.createSequentialGroup()
							.add(exportFilename)
							.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
							.add(exportFilenameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
							.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
							.add(exportFilenameBrowseButton)
							.add(20, 20, 20))))
							);
		layout.setVerticalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout.createSequentialGroup()
					.addContainerGap()
					.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
						.add(emailLabel)
						.add(emailTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
					.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
						.add(userNameLabel)
						.add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
					.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
						.add(exportFilenameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(exportFilenameBrowseButton)
						.add(exportFilename))
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
					.add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
					.add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
					.add(backupOnRevertModifications)
					.add(27, 27, 27))
					);

		emailTextField.getAccessibleContext().setAccessibleName("Email:");
		emailTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_userNameTextField")); // NOI18N
		jPanel2.getAccessibleContext().setAccessibleName("<GitPanel.jPanel2.border.title>");
		exportFilenameTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_exportFileNameTextField")); // NOI18N
		exportFilenameBrowseButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_exportFilenameBrowseButton")); // NOI18N
		backupOnRevertModifications.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GitPanel.class, "ACSD_backupOnRevertModifications")); // NOI18N
	}// </editor-fold>//GEN-END:initComponents

	private void nameChange()
	{
		controller.changed();
	}

	void load()
	{
		// TODO read settings and initialize GUI
		// Example:
		// someCheckBox.setSelected(Preferences.userNodeForPackage(GitPanel.class).getBoolean("someFlag", false)); // NOI18N
		// or for org.openide.util with API spec. version >= 7.4:
		// someCheckBox.setSelected(NbPreferences.forModule(GitPanel.class).getBoolean("someFlag", false)); // NOI18N
		// or:
		// someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
		emailTextField.setText(GitModuleConfig.getDefault().getEmail());
		userNameTextField.setText(GitModuleConfig.getDefault().getUserName());
		exportFilenameTextField.setText(GitModuleConfig.getDefault().getExportFilename());
		annotationTextField.setText(GitModuleConfig.getDefault().getAnnotationFormat());
		backupOnRevertModifications.setSelected(GitModuleConfig.getDefault().getBackupOnRevertModifications());
	}

	void store()
	{
		// TODO store modified settings
		// Example:
		// Preferences.userNodeForPackage(GitPanel.class).putBoolean("someFlag", someCheckBox.isSelected()); // NOI18N
		// or for org.openide.util with API spec. version >= 7.4:
		// NbPreferences.forModule(GitPanel.class).putBoolean("someFlag", someCheckBox.isSelected()); // NOI18N
		// or:
		// SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
		GitModuleConfig.getDefault().setEmail(emailTextField.getText());
		GitModuleConfig.getDefault().setUserName(userNameTextField.getText());
		GitModuleConfig.getDefault().setExportFilename(exportFilenameTextField.getText());
		GitModuleConfig.getDefault().setAnnotationFormat(annotationTextField.getText());
		GitModuleConfig.getDefault().setBackupOnRevertModifications(backupOnRevertModifications.isSelected());
		if (HtmlFormatter.isRevisionInAnnotationFormat(annotationTextField.getText()))
			GitUtils.warningDialog(GitPanel.class,
				"MSG_STATUS_LABEL_WITH_REVSION_TITLE", "MSG_STATUS_LABEL_WITH_REVSION_MSG");
	}

	boolean valid()
	{
		// TODO check whether form is consistent and complete
		//return true;
		String name = userNameTextField.getText();
		String email = emailTextField.getText();
		Boolean valid;

		valid = GitModuleConfig.getDefault().isUserNameValid(name);
		if (!valid)
			return false;
		valid = GitModuleConfig.getDefault().isEmailValid(email);
		return valid;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	final javax.swing.JButton addButton = new javax.swing.JButton();
	final javax.swing.JTextField annotationTextField = new javax.swing.JTextField();
	private javax.swing.JCheckBox backupOnRevertModifications;
	private javax.swing.JLabel emailLabel;
	final javax.swing.JTextField emailTextField = new javax.swing.JTextField();
	private javax.swing.JLabel exportFilename;
	final javax.swing.JButton exportFilenameBrowseButton = new javax.swing.JButton();
	final javax.swing.JTextField exportFilenameTextField = new javax.swing.JTextField();
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	final javax.swing.JButton manageButton = new javax.swing.JButton();
	private javax.swing.JLabel userNameLabel;
	private javax.swing.JTextField userNameTextField;
	// End of variables declaration//GEN-END:variables
}
